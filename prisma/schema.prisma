// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  forms           Form[]
  teamMembers     TeamMember[]
  ownedTeams      Team[]           @relation("TeamOwner")
  teamInvitations TeamInvitation[] @relation("InvitedBy")
  subscriptions   Subscription[]
  teamActivities  TeamActivity[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Form {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("draft") // draft, published, archived
  userId      String
  teamId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team?      @relation(fields: [teamId], references: [id])
  fields    Field[]
  responses Response[]
}

model Field {
  id          String  @id @default(cuid())
  formId      String
  label       String
  type        String
  required    Boolean @default(false)
  options     String? // JSON string for options
  placeholder String?
  order       Int

  form    Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers Answer[]
}

model Response {
  id        String   @id @default(cuid())
  formId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  form    Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers Answer[]
}

model Answer {
  id         String   @id @default(cuid())
  value      String
  fieldId    String
  responseId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  field    Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  response Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  settings    Json?    @default("{}")

  owner       User             @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     TeamMember[]
  forms       Form[]
  invitations TeamInvitation[]
  activities  TeamActivity[]
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      String   @default("VIEWER") // ADMIN, EDITOR, VIEWER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model TeamInvitation {
  id          String   @id @default(cuid())
  teamId      String
  email       String
  role        String   @default("VIEWER") // ADMIN, EDITOR, VIEWER
  status      String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  token       String?  @default(cuid())
  invitedById String
  expires     DateTime @default(dbgenerated("NOW() + interval '7 days'"))
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  team      Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  invitedBy User @relation("InvitedBy", fields: [invitedById], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
}

model Plan {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  interval    String   @default("month") // month, year
  features    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriptions Subscription[]
}

model Subscription {
  id        String    @id @default(cuid())
  userId    String
  planId    String
  status    String    @default("active") // active, canceled, expired
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan Plan @relation(fields: [planId], references: [id])
}

model TeamActivity {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  action    String // MEMBER_INVITED, MEMBER_JOINED, FORM_CREATED, etc.
  details   Json? // Additional details about the action
  createdAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
